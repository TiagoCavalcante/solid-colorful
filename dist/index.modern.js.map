{"version":3,"file":"index.modern.js","sources":["../src/hooks/useEventCallback.ts","../src/utils/clamp.ts","../src/components/common/Interactive.tsx","../src/utils/format.ts","../src/components/common/Pointer.tsx","../src/utils/round.ts","../src/utils/convert.ts","../src/components/common/Hue.tsx","../src/components/common/Saturation.tsx","../src/utils/compare.ts","../src/hooks/useColorManipulation.ts","../src/utils/nonce.ts","../src/hooks/useStyleSheet.ts","../src/components/common/ColorPicker.tsx","../src/components/HexColorPicker.tsx","../src/components/common/Alpha.tsx","../src/components/common/AlphaColorPicker.tsx","../src/components/HslaColorPicker.tsx","../src/components/HslaStringColorPicker.tsx","../src/components/HslColorPicker.tsx","../src/components/HslStringColorPicker.tsx","../src/components/HsvaColorPicker.tsx","../src/components/HsvaStringColorPicker.tsx","../src/components/HsvColorPicker.tsx","../src/components/HsvStringColorPicker.tsx","../src/components/RgbaColorPicker.tsx","../src/components/RgbaStringColorPicker.tsx","../src/components/RgbColorPicker.tsx","../src/components/RgbStringColorPicker.tsx","../src/utils/validate.ts","../src/components/common/ColorInput.tsx","../src/components/HexColorInput.tsx"],"sourcesContent":["// Saves incoming handler to the ref in order to avoid \"useCallback hell\"\nexport function useEventCallback<T>(handler?: (value: T) => void): (value: T) => void {\n  const callbackRef = handler\n\n  const fn = (value: T) => {\n    if (callbackRef) callbackRef(value)\n  }\n\n  return fn\n}\n","// Clamps a value between an upper and lower bound.\n// We use ternary operators because it makes the minified code\n// 2 times shorter then `Math.min(Math.max(a,b),c)`\nexport const clamp = (number: number, min = 0, max = 1): number => {\n  return number > max ? max : number < min ? min : number\n}\n","import { createEffect, createMemo, JSX, splitProps } from \"solid-js\"\nimport { useEventCallback } from \"../../hooks/useEventCallback\"\nimport { clamp } from \"../../utils/clamp\"\n\nexport interface Interaction {\n  left: number\n  top: number\n}\n\n// Check if an event was triggered by touch\nconst isTouch = (event: MouseEvent | TouchEvent): event is TouchEvent => \"touches\" in event\n\n// Finds a proper touch point by its identifier\nconst getTouchPoint = (touches: TouchList, touchId: null | number): Touch => {\n  for (let i = 0; i < touches.length; i++) {\n    if (touches[i].identifier === touchId) return touches[i]\n  }\n  return touches[0]\n}\n\n// Finds the proper window object to fix iframe embedding issues\nconst getParentWindow = (node?: HTMLDivElement | null): Window => {\n  return (node && node.ownerDocument.defaultView) || self\n}\n\n// Returns a relative position of the pointer inside the node's bounding box\nconst getRelativePosition = (\n  node: HTMLDivElement,\n  event: MouseEvent | TouchEvent,\n  touchId: null | number\n): Interaction => {\n  const rect = node.getBoundingClientRect()\n\n  // Get user's pointer position from `touches` array if it's a `TouchEvent`\n  const pointer = isTouch(event) ? getTouchPoint(event.touches, touchId) : (event as MouseEvent)\n\n  return {\n    left: clamp((pointer.pageX - (rect.left + getParentWindow(node).pageXOffset)) / rect.width),\n    top: clamp((pointer.pageY - (rect.top + getParentWindow(node).pageYOffset)) / rect.height),\n  }\n}\n\n// Browsers introduced an intervention, making touch events passive by default.\n// This workaround removes `preventDefault` call from the touch handlers.\n// https://github.com/facebook/react/issues/19651\nconst preventDefaultMove = (event: MouseEvent | TouchEvent): void => {\n  !isTouch(event) && event.preventDefault()\n}\n\n// Prevent mobile browsers from handling mouse events (conflicting with touch ones).\n// If we detected a touch interaction before, we prefer reacting to touch events only.\nconst isInvalid = (event: MouseEvent | TouchEvent, hasTouch: boolean): boolean => {\n  return hasTouch && !isTouch(event)\n}\n\ninterface Props {\n  onMove: (interaction: Interaction) => void\n  onKey: (offset: Interaction) => void\n  children: JSX.Element\n}\n\nconst Interactive = (props: Props) => {\n  const [local, rest] = splitProps(props, [\"onMove\", \"onKey\"])\n\n  const onMoveCallback = useEventCallback<Interaction>(local.onMove)\n  const onKeyCallback = useEventCallback<Interaction>(local.onKey)\n  let container: HTMLDivElement | null = null // eslint-disable-line prefer-const\n  let touchId: null | number = null\n  let hasTouch = false\n\n  const events = createMemo(() => {\n    const handleMoveStart = (event: MouseEvent | TouchEvent) => {\n      const el = container\n      if (!el) return\n\n      // Prevent text selection\n      preventDefaultMove(event)\n\n      if (isInvalid(event, hasTouch) || !el) return\n\n      if (isTouch(event)) {\n        hasTouch = true\n        const changedTouches = event.changedTouches || []\n        if (changedTouches.length) touchId = changedTouches[0].identifier\n      }\n\n      el.focus()\n      onMoveCallback(getRelativePosition(el, event, touchId))\n      toggleDocumentEvents(true)\n    }\n\n    const handleMove = (event: MouseEvent | TouchEvent) => {\n      // Prevent text selection\n      preventDefaultMove(event)\n\n      // If user moves the pointer outside of the window or iframe bounds and release it there,\n      // `mouseup`/`touchend` won't be fired. In order to stop the picker from following the cursor\n      // after the user has moved the mouse/finger back to the document, we check `event.buttons`\n      // and `event.touches`. It allows us to detect that the user is just moving his pointer\n      // without pressing it down\n      const isDown = isTouch(event) ? event.touches.length > 0 : event.buttons > 0\n\n      if (isDown && container) {\n        onMoveCallback(getRelativePosition(container, event, touchId))\n      } else {\n        toggleDocumentEvents(false)\n      }\n    }\n\n    const handleMoveEnd = () => toggleDocumentEvents(false)\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      const keyCode = event.which || event.keyCode\n\n      // Ignore all keys except arrow ones\n      if (keyCode < 37 || keyCode > 40) return\n      // Do not scroll page by arrow keys when document is focused on the element\n      event.preventDefault()\n      // Send relative offset to the parent component.\n      // We use codes (37←, 38↑, 39→, 40↓) instead of keys ('ArrowRight', 'ArrowDown', etc)\n      // to reduce the size of the library\n      onKeyCallback({\n        left: keyCode === 39 ? 0.05 : keyCode === 37 ? -0.05 : 0,\n        top: keyCode === 40 ? 0.05 : keyCode === 38 ? -0.05 : 0,\n      })\n    }\n\n    function toggleDocumentEvents(state?: boolean) {\n      const touch = hasTouch\n      const el = container\n      const parentWindow = getParentWindow(el)\n\n      // Add or remove additional pointer event listeners\n      const toggleEvent = state ? parentWindow.addEventListener : parentWindow.removeEventListener\n      toggleEvent(touch ? \"touchmove\" : \"mousemove\", handleMove)\n      toggleEvent(touch ? \"touchend\" : \"mouseup\", handleMoveEnd)\n    }\n\n    return { handleMoveStart, handleKeyDown, toggleDocumentEvents }\n  })\n\n  // Remove window event listeners before unmounting\n  createEffect(() => events().toggleDocumentEvents())\n\n  return (\n    <div\n      {...rest}\n      onTouchStart={events().handleMoveStart}\n      onMouseDown={events().handleMoveStart}\n      class=\"solid-colorful__interactive\"\n      ref={container!}\n      onKeyDown={events().handleKeyDown}\n      tabIndex={0}\n      role=\"slider\"\n    />\n  )\n}\n\nexport { Interactive }\n","export const formatClassName = (names: unknown[]): string => names.filter(Boolean).join(\" \")\n","import { formatClassName } from \"../../utils/format\"\n\ninterface Props {\n  class?: string\n  top?: number\n  left: number\n  color: string\n}\n\nexport const Pointer = (props: Props) => {\n  const nodeClass = formatClassName([\"solid-colorful__pointer\", props.class])\n\n  return (\n    <div\n      class={nodeClass}\n      style={{\n        top: `${(props.top ?? 0.5) * 100}%`,\n        left: `${props.left * 100}%`,\n      }}\n    >\n      <div class=\"solid-colorful__pointer-fill\" style={{ \"background-color\": props.color }} />\n    </div>\n  )\n}\n","export const round = (number: number, digits = 0, base = Math.pow(10, digits)): number => {\n  return Math.round(base * number) / base\n}\n","import { round } from \"./round\"\nimport { RgbaColor, RgbColor, HslaColor, HslColor, HsvaColor, HsvColor } from \"../types\"\n\n/**\n * Valid CSS <angle> units.\n * https://developer.mozilla.org/en-US/docs/Web/CSS/angle\n */\nconst angleUnits: Record<string, number> = {\n  grad: 360 / 400,\n  turn: 360,\n  rad: 360 / (Math.PI * 2),\n}\n\nexport const hexToHsva = (hex: string): HsvaColor => rgbaToHsva(hexToRgba(hex))\n\nexport const hexToRgba = (hex: string): RgbaColor => {\n  if (hex[0] === \"#\") hex = hex.substr(1)\n\n  if (hex.length < 6) {\n    return {\n      r: parseInt(hex[0] + hex[0], 16),\n      g: parseInt(hex[1] + hex[1], 16),\n      b: parseInt(hex[2] + hex[2], 16),\n      a: 1,\n    }\n  }\n\n  return {\n    r: parseInt(hex.substr(0, 2), 16),\n    g: parseInt(hex.substr(2, 2), 16),\n    b: parseInt(hex.substr(4, 2), 16),\n    a: 1,\n  }\n}\n\nexport const parseHue = (value: string, unit = \"deg\"): number => {\n  return Number(value) * (angleUnits[unit] || 1)\n}\n\nexport const hslaStringToHsva = (hslString: string): HsvaColor => {\n  const matcher =\n    /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i\n  const match = matcher.exec(hslString)\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 }\n\n  return hslaToHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    l: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1),\n  })\n}\n\nexport const hslStringToHsva = hslaStringToHsva\n\nexport const hslaToHsva = (props: HslaColor): HsvaColor => {\n  const s = (props.s * (props.l < 50 ? props.l : 100 - props.l)) / 100\n\n  return {\n    h: props.h,\n    s: s > 0 ? ((2 * s) / (props.l + s)) * 100 : 0,\n    v: props.l + s,\n    a: props.a,\n  }\n}\n\nexport const hsvaToHex = (hsva: HsvaColor): string => rgbaToHex(hsvaToRgba(hsva))\n\nexport const hsvaToHsla = (props: HsvaColor): HslaColor => {\n  const hh = ((200 - props.s) * props.v) / 100\n\n  return {\n    h: round(props.h),\n    s: round(\n      hh > 0 && hh < 200 ? ((props.s * props.v) / 100 / (hh <= 100 ? hh : 200 - hh)) * 100 : 0\n    ),\n    l: round(hh / 2),\n    a: round(props.a, 2),\n  }\n}\n\nexport const hsvaToHslString = (hsva: HsvaColor): string => {\n  const { h, s, l } = hsvaToHsla(hsva)\n  return `hsl(${h}, ${s}%, ${l}%)`\n}\n\nexport const hsvaToHsvString = (hsva: HsvaColor): string => {\n  const { h, s, v } = roundHsva(hsva)\n  return `hsv(${h}, ${s}%, ${v}%)`\n}\n\nexport const hsvaToHsvaString = (hsva: HsvaColor): string => {\n  const { h, s, v, a } = roundHsva(hsva)\n  return `hsva(${h}, ${s}%, ${v}%, ${a})`\n}\n\nexport const hsvaToHslaString = (hsva: HsvaColor): string => {\n  const { h, s, l, a } = hsvaToHsla(hsva)\n  return `hsla(${h}, ${s}%, ${l}%, ${a})`\n}\n\nexport const hsvaToRgba = (props: HsvaColor): RgbaColor => {\n  const h = (props.h / 360) * 6\n  const s = props.s / 100\n  const v = props.v / 100\n\n  const hh = Math.floor(h),\n    b = v * (1 - s),\n    c = v * (1 - (h - hh) * s),\n    d = v * (1 - (1 - h + hh) * s),\n    module = hh % 6\n\n  return {\n    r: round([v, c, b, b, d, v][module] * 255),\n    g: round([d, v, v, c, b, b][module] * 255),\n    b: round([b, b, d, v, v, c][module] * 255),\n    a: round(props.a, 2),\n  }\n}\n\nexport const hsvaToRgbString = (hsva: HsvaColor): string => {\n  const { r, g, b } = hsvaToRgba(hsva)\n  return `rgb(${r}, ${g}, ${b})`\n}\n\nexport const hsvaToRgbaString = (hsva: HsvaColor): string => {\n  const { r, g, b, a } = hsvaToRgba(hsva)\n  return `rgba(${r}, ${g}, ${b}, ${a})`\n}\n\nexport const hsvaStringToHsva = (hsvString: string): HsvaColor => {\n  const matcher =\n    /hsva?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i\n  const match = matcher.exec(hsvString)\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 }\n\n  return roundHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    v: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1),\n  })\n}\n\nexport const hsvStringToHsva = hsvaStringToHsva\n\nexport const rgbaStringToHsva = (rgbaString: string): HsvaColor => {\n  const matcher =\n    /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i\n  const match = matcher.exec(rgbaString)\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 }\n\n  return rgbaToHsva({\n    r: Number(match[1]) / (match[2] ? 100 / 255 : 1),\n    g: Number(match[3]) / (match[4] ? 100 / 255 : 1),\n    b: Number(match[5]) / (match[6] ? 100 / 255 : 1),\n    a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? 100 : 1),\n  })\n}\n\nexport const rgbStringToHsva = rgbaStringToHsva\n\nconst format = (number: number) => {\n  const hex = number.toString(16)\n  return hex.length < 2 ? \"0\" + hex : hex\n}\n\nexport const rgbaToHex = (props: RgbaColor): string => {\n  return \"#\" + format(props.r) + format(props.g) + format(props.b)\n}\n\nexport const rgbaToHsva = (props: RgbaColor): HsvaColor => {\n  const max = Math.max(props.r, props.g, props.b)\n  const delta = max - Math.min(props.r, props.g, props.b)\n\n  // prettier-ignore\n  const hh = delta\n    ? max === props.r\n      ? (props.g - props.b) / delta\n      : max === props.g\n        ? 2 + (props.b - props.r) / delta\n        : 4 + (props.r - props.g) / delta\n    : 0\n\n  return {\n    h: round(60 * (hh < 0 ? hh + 6 : hh)),\n    s: round(max ? (delta / max) * 100 : 0),\n    v: round((max / 255) * 100),\n    a: props.a,\n  }\n}\n\nexport const roundHsva = (hsva: HsvaColor): HsvaColor => ({\n  h: round(hsva.h),\n  s: round(hsva.s),\n  v: round(hsva.v),\n  a: round(hsva.a, 2),\n})\n\nexport const rgbaToRgb = (props: RgbaColor): RgbColor => ({ r: props.r, g: props.g, b: props.b })\n\nexport const hslaToHsl = (props: HslaColor): HslColor => ({ h: props.h, s: props.s, l: props.l })\n\nexport const hsvaToHsv = (hsva: HsvaColor): HsvColor => {\n  const { h, s, v } = roundHsva(hsva)\n  return { h, s, v }\n}\n","import { Interactive, Interaction } from \"./Interactive\"\nimport { Pointer } from \"./Pointer\"\n\nimport { hsvaToHslString } from \"../../utils/convert\"\nimport { formatClassName } from \"../../utils/format\"\nimport { clamp } from \"../../utils/clamp\"\nimport { round } from \"../../utils/round\"\n\ninterface Props {\n  class?: string\n  hue: number\n  onChange: (newHue: { h: number }) => void\n}\n\nconst Hue = (props: Props) => {\n  const handleMove = (interaction: Interaction) => {\n    props.onChange({ h: 360 * interaction.left })\n  }\n\n  const handleKey = (offset: Interaction) => {\n    // Hue measured in degrees of the color circle ranging from 0 to 360\n    props.onChange({\n      h: clamp(props.hue + offset.left * 360, 0, 360),\n    })\n  }\n\n  const nodeClass = formatClassName([\"solid-colorful__hue\", props.class])\n\n  return (\n    <div class={nodeClass}>\n      <Interactive\n        onMove={handleMove}\n        onKey={handleKey}\n        aria-label=\"Hue\"\n        aria-valuetext={round(props.hue)}\n      >\n        <Pointer\n          class=\"solid-colorful__hue-pointer\"\n          left={props.hue / 360}\n          color={hsvaToHslString({ h: props.hue, s: 100, v: 100, a: 1 })}\n        />\n      </Interactive>\n    </div>\n  )\n}\n\nexport { Hue }\n","import { Interactive, Interaction } from \"./Interactive\"\nimport { Pointer } from \"./Pointer\"\nimport { HsvaColor } from \"../../types\"\nimport { hsvaToHslString } from \"../../utils/convert\"\nimport { clamp } from \"../../utils/clamp\"\nimport { round } from \"../../utils/round\"\n\ninterface Props {\n  hsva: HsvaColor\n  onChange: (newColor: { s: number; v: number }) => void\n}\n\nconst Saturation = (props: Props) => {\n  const handleMove = (interaction: Interaction) => {\n    props.onChange({\n      s: interaction.left * 100,\n      v: 100 - interaction.top * 100,\n    })\n  }\n\n  const handleKey = (offset: Interaction) => {\n    // Saturation and brightness always fit into [0, 100] range\n    props.onChange({\n      s: clamp(props.hsva.s + offset.left * 100, 0, 100),\n      v: clamp(props.hsva.v - offset.top * 100, 0, 100),\n    })\n  }\n\n  return (\n    <div\n      class=\"solid-colorful__saturation\"\n      style={{\n        \"background-color\": hsvaToHslString({ h: props.hsva.h, s: 100, v: 100, a: 1 }),\n      }}\n    >\n      <Interactive\n        onMove={handleMove}\n        onKey={handleKey}\n        aria-label=\"Color\"\n        aria-valuetext={`Saturation ${round(props.hsva.s)}%, Brightness ${round(props.hsva.v)}%`}\n      >\n        <Pointer\n          class=\"solid-colorful__saturation-pointer\"\n          top={1 - props.hsva.v / 100}\n          left={props.hsva.s / 100}\n          color={hsvaToHslString(props.hsva)}\n        />\n      </Interactive>\n    </div>\n  )\n}\n\nexport { Saturation }\n","import { hexToRgba } from \"./convert\"\nimport { ObjectColor } from \"../types\"\n\nexport const equalColorObjects = (first: ObjectColor, second: ObjectColor): boolean => {\n  if (first === second) return true\n\n  for (const prop in first) {\n    // The following allows for a type-safe calling of this function (first & second have to be HSL, HSV, or RGB)\n    // with type-unsafe iterating over object keys. TS does not allow this without an index (`[key: string]: number`)\n    // on an object to define how iteration is normally done. To ensure extra keys are not allowed on our types,\n    // we must cast our object to unknown (as RGB demands `r` be a key, while `Record<string, x>` does not care if\n    // there is or not), and then as a type TS can iterate over.\n    if (\n      (first as unknown as Record<string, number>)[prop] !==\n      (second as unknown as Record<string, number>)[prop]\n    )\n      return false\n  }\n\n  return true\n}\n\nexport const equalColorString = (first: string, second: string): boolean => {\n  return first.replace(/\\s/g, \"\") === second.replace(/\\s/g, \"\")\n}\n\nexport const equalHex = (first: string, second: string): boolean => {\n  if (first.toLowerCase() === second.toLowerCase()) return true\n\n  // To compare colors like `#FFF` and `ffffff` we convert them into RGB objects\n  return equalColorObjects(hexToRgba(first), hexToRgba(second))\n}\n","import { Accessor, createEffect, createSignal } from \"solid-js\"\nimport { ColorModel, AnyColor, HsvaColor } from \"../types\"\nimport { equalColorObjects } from \"../utils/compare\"\nimport { useEventCallback } from \"./useEventCallback\"\n\nexport function useColorManipulation<T extends AnyColor>(\n  colorModel: ColorModel<T>,\n  color: T,\n  onChange?: (color: T) => void\n): [Accessor<HsvaColor>, (color: Partial<HsvaColor>) => void] {\n  // Save onChange callback in the ref for avoiding \"useCallback hell\"\n  const onChangeCallback = useEventCallback<T>(onChange)\n\n  // No matter which color model is used (HEX, RGB(A) or HSL(A)),\n  // all internal calculations are based on HSVA model\n  const [hsva, updateHsva] = createSignal<HsvaColor>(colorModel.toHsva(color))\n\n  let cache = { color, hsva: hsva() }\n\n  // Update local HSVA-value if `color` property value is changed,\n  // but only if that's not the same color that we just sent to the parent\n  createEffect(() => {\n    if (!colorModel.equal(color, cache.color)) {\n      const newHsva = colorModel.toHsva(color)\n      cache = { hsva: newHsva, color }\n      updateHsva(newHsva)\n    }\n  })\n\n  // Trigger `onChange` callback only if an updated color is different from cached one;\n  // save the new color to the ref to prevent unnecessary updates\n  createEffect(() => {\n    let newColor\n    if (\n      !equalColorObjects(hsva(), cache.hsva) &&\n      !colorModel.equal((newColor = colorModel.fromHsva(hsva())), cache.color)\n    ) {\n      cache = { hsva: hsva(), color: newColor }\n      onChangeCallback(newColor)\n    }\n  })\n\n  // Merge the current HSVA color object with updated params.\n  // For example, when a child component sends `h` or `s` only\n  const handleChange = (params: Partial<HsvaColor>) => {\n    updateHsva((current) => Object.assign({}, current, params))\n  }\n\n  return [hsva, handleChange]\n}\n","declare const __webpack_nonce__: string | undefined\nlet nonce: string | undefined\n\n/**\n * Returns a nonce hash included by Webpack or the one defined manually by developer.\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce\n * https://webpack.js.org/guides/csp/\n */\nexport const getNonce = (): string | undefined => {\n  if (nonce) return nonce\n  if (typeof __webpack_nonce__ !== \"undefined\") return __webpack_nonce__\n  return undefined\n}\n\n/**\n * Signs the style tag with a base64-encoded string (nonce) to conforms to Content Security Policies.\n * This function has to be invoked before any picker is rendered if you aren't using Webpack for CSP.\n */\nexport const setNonce = (hash: string): void => {\n  nonce = hash\n}\n","import { getNonce } from \"../utils/nonce\"\nimport { createEffect } from \"solid-js\"\n\n// Bundler is configured to load this as a processed minified CSS-string\nimport styles from \"../css/styles.css\"\n\nconst styleElementMap: Map<Document, HTMLStyleElement> = new Map()\n\n/**\n * Injects CSS code into the document's <head>\n */\nexport const useStyleSheet = (nodeRef?: HTMLDivElement): void => {\n  createEffect(() => {\n    const parentDocument = nodeRef ? nodeRef.ownerDocument : document\n\n    if (typeof parentDocument !== \"undefined\" && !styleElementMap.has(parentDocument)) {\n      const styleElement = parentDocument.createElement(\"style\")\n      styleElement.innerHTML = styles\n      styleElementMap.set(parentDocument, styleElement)\n\n      // Conform to CSP rules by setting `nonce` attribute to the inline styles\n      const nonce = getNonce()\n      if (nonce) styleElement.setAttribute(\"nonce\", nonce)\n\n      parentDocument.head.appendChild(styleElement)\n    }\n  })\n}\n","import { Hue } from \"./Hue\"\nimport { Saturation } from \"./Saturation\"\n\nimport { ColorModel, ColorPickerBaseProps, AnyColor } from \"../../types\"\nimport { useColorManipulation } from \"../../hooks/useColorManipulation\"\nimport { useStyleSheet } from \"../../hooks/useStyleSheet\"\nimport { formatClassName } from \"../../utils/format\"\nimport { createSignal, splitProps } from \"solid-js\"\n\ninterface Props<T extends AnyColor> extends Partial<ColorPickerBaseProps<T>> {\n  colorModel: ColorModel<T>\n}\n\nexport const ColorPicker = <T extends AnyColor>(props: Props<T>) => {\n  const [local, rest] = splitProps(props, [\"class\", \"colorModel\", \"color\", \"onChange\"])\n\n  const [nodeRef, setNodeRef] = createSignal<HTMLDivElement>()\n\n  useStyleSheet(nodeRef()!)\n\n  const [hsva, updateHsva] = useColorManipulation<T>(\n    local.colorModel,\n    local.color ?? props.colorModel.defaultColor,\n    local.onChange\n  )\n\n  const nodeClass = formatClassName([\"solid-colorful\", local.class])\n\n  return (\n    <div {...rest} ref={setNodeRef} class={nodeClass}>\n      <Saturation hsva={hsva()} onChange={updateHsva} />\n      <Hue hue={hsva().h} onChange={updateHsva} class=\"solid-colorful__last-control\" />\n    </div>\n  )\n}\n","import { ColorPicker } from \"./common/ColorPicker\"\nimport { ColorModel, ColorPickerBaseProps } from \"../types\"\nimport { equalHex } from \"../utils/compare\"\nimport { hexToHsva, hsvaToHex } from \"../utils/convert\"\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"000\",\n  toHsva: hexToHsva,\n  fromHsva: hsvaToHex,\n  equal: equalHex,\n}\n\nexport const HexColorPicker = (props: Partial<ColorPickerBaseProps<string>>) => (\n  <ColorPicker {...props} colorModel={colorModel} />\n)\n","import { Interaction, Interactive } from \"./Interactive\"\nimport { Pointer } from \"./Pointer\"\n\nimport { HsvaColor } from \"../../types\"\nimport { clamp } from \"../../utils/clamp\"\nimport { hsvaToHslaString } from \"../../utils/convert\"\nimport { formatClassName } from \"../../utils/format\"\nimport { round } from \"../../utils/round\"\n\ninterface Props {\n  class?: string\n  hsva: HsvaColor\n  onChange: (newAlpha: { a: number }) => void\n}\n\nexport const Alpha = (props: Props) => {\n  const handleMove = (interaction: Interaction) => {\n    props.onChange({ a: interaction.left })\n  }\n\n  const handleKey = (offset: Interaction) => {\n    // Alpha always fit into [0, 1] range\n    props.onChange({ a: clamp(props.hsva.a + offset.left) })\n  }\n\n  // We use `Object.assign` instead of the spread operator\n  // to prevent adding the polyfill (about 150 bytes gzipped)\n  const colorFrom = hsvaToHslaString(Object.assign({}, props.hsva, { a: 0 }))\n  const colorTo = hsvaToHslaString(Object.assign({}, props.hsva, { a: 1 }))\n\n  const gradientStyle = {\n    backgroundImage: `linear-gradient(90deg, ${colorFrom}, ${colorTo})`,\n  }\n\n  const nodeClass = formatClassName([\"solid-colorful__alpha\", props.class])\n\n  return (\n    <div class={nodeClass}>\n      <div class=\"solid-colorful__alpha-gradient\" style={gradientStyle} />\n      <Interactive\n        onMove={handleMove}\n        onKey={handleKey}\n        aria-label=\"Alpha\"\n        aria-valuetext={`${round(props.hsva.a * 100)}%`}\n      >\n        <Pointer\n          class=\"solid-colorful__alpha-pointer\"\n          left={props.hsva.a}\n          color={hsvaToHslaString(props.hsva)}\n        />\n      </Interactive>\n    </div>\n  )\n}\n","import { Hue } from \"./Hue\"\nimport { Saturation } from \"./Saturation\"\nimport { Alpha } from \"./Alpha\"\n\nimport { ColorModel, ColorPickerBaseProps, AnyColor } from \"../../types\"\nimport { useColorManipulation } from \"../../hooks/useColorManipulation\"\nimport { useStyleSheet } from \"../../hooks/useStyleSheet\"\nimport { formatClassName } from \"../../utils/format\"\nimport { createSignal, splitProps } from \"solid-js\"\n\ninterface Props<T extends AnyColor> extends Partial<ColorPickerBaseProps<T>> {\n  colorModel: ColorModel<T>\n}\n\nexport const AlphaColorPicker = <T extends AnyColor>(props: Props<T>) => {\n  const [local, rest] = splitProps(props, [\"class\", \"colorModel\", \"color\", \"onChange\"])\n\n  const [nodeRef, setNodeRef] = createSignal<HTMLDivElement>()\n\n  useStyleSheet(nodeRef())\n\n  const [hsva, updateHsva] = useColorManipulation<T>(\n    local.colorModel,\n    local.color ?? local.colorModel.defaultColor,\n    local.onChange\n  )\n\n  const nodeClassName = formatClassName([\"solid-colorful\", local.class])\n\n  return (\n    <div {...rest} ref={setNodeRef} class={nodeClassName}>\n      <Saturation hsva={hsva()} onChange={updateHsva} />\n      <Hue hue={hsva().h} onChange={updateHsva} />\n      <Alpha hsva={hsva()} onChange={updateHsva} class=\"solid-colorful__last-control\" />\n    </div>\n  )\n}\n","import { AlphaColorPicker } from \"./common/AlphaColorPicker\"\nimport { ColorModel, ColorPickerBaseProps, HslaColor } from \"../types\"\nimport { equalColorObjects } from \"../utils/compare\"\nimport { hslaToHsva, hsvaToHsla } from \"../utils/convert\"\n\nconst colorModel: ColorModel<HslaColor> = {\n  defaultColor: { h: 0, s: 0, l: 0, a: 1 },\n  toHsva: hslaToHsva,\n  fromHsva: hsvaToHsla,\n  equal: equalColorObjects,\n}\n\nexport const HslaColorPicker = (props: Partial<ColorPickerBaseProps<HslaColor>>) => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n)\n","import { ColorModel, ColorPickerBaseProps } from \"../types\"\nimport { equalColorString } from \"../utils/compare\"\nimport { hslaStringToHsva, hsvaToHslaString } from \"../utils/convert\"\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\"\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsla(0, 0%, 0%, 1)\",\n  toHsva: hslaStringToHsva,\n  fromHsva: hsvaToHslaString,\n  equal: equalColorString,\n}\n\nexport const HslaStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>) => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n)\n","import { ColorModel, ColorPickerBaseProps, HslColor } from \"../types\"\nimport { equalColorObjects } from \"../utils/compare\"\nimport { hslaToHsl, hslaToHsva, hsvaToHsla } from \"../utils/convert\"\nimport { ColorPicker } from \"./common/ColorPicker\"\n\nconst colorModel: ColorModel<HslColor> = {\n  defaultColor: { h: 0, s: 0, l: 0 },\n  toHsva: ({ h, s, l }) => hslaToHsva({ h, s, l, a: 1 }),\n  fromHsva: (hsva) => hslaToHsl(hsvaToHsla(hsva)),\n  equal: equalColorObjects,\n}\n\nexport const HslColorPicker = (props: Partial<ColorPickerBaseProps<HslColor>>) => (\n  <ColorPicker {...props} colorModel={colorModel} />\n)\n","import { ColorModel, ColorPickerBaseProps } from \"../types\"\nimport { equalColorString } from \"../utils/compare\"\nimport { hslStringToHsva, hsvaToHslString } from \"../utils/convert\"\nimport { ColorPicker } from \"./common/ColorPicker\"\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsl(0, 0%, 0%)\",\n  toHsva: hslStringToHsva,\n  fromHsva: hsvaToHslString,\n  equal: equalColorString,\n}\n\nexport const HslStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>) => (\n  <ColorPicker {...props} colorModel={colorModel} />\n)\n","import { ColorModel, ColorPickerBaseProps, HsvaColor } from \"../types\"\nimport { equalColorObjects } from \"../utils/compare\"\nimport { roundHsva } from \"../utils/convert\"\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\"\n\nconst colorModel: ColorModel<HsvaColor> = {\n  defaultColor: { h: 0, s: 0, v: 0, a: 1 },\n  toHsva: (hsva) => hsva,\n  fromHsva: roundHsva,\n  equal: equalColorObjects,\n}\n\nexport const HsvaColorPicker = (props: Partial<ColorPickerBaseProps<HsvaColor>>) => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n)\n","import { ColorModel, ColorPickerBaseProps } from \"../types\"\nimport { equalColorString } from \"../utils/compare\"\nimport { hsvaStringToHsva, hsvaToHsvaString } from \"../utils/convert\"\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\"\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsva(0, 0%, 0%, 1)\",\n  toHsva: hsvaStringToHsva,\n  fromHsva: hsvaToHsvaString,\n  equal: equalColorString,\n}\n\nexport const HsvaStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>) => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n)\n","import { ColorPicker } from \"./common/ColorPicker\"\nimport { ColorModel, ColorPickerBaseProps, HsvColor } from \"../types\"\nimport { equalColorObjects } from \"../utils/compare\"\nimport { hsvaToHsv } from \"../utils/convert\"\n\nconst colorModel: ColorModel<HsvColor> = {\n  defaultColor: { h: 0, s: 0, v: 0 },\n  toHsva: ({ h, s, v }) => ({ h, s, v, a: 1 }),\n  fromHsva: hsvaToHsv,\n  equal: equalColorObjects,\n}\n\nexport const HsvColorPicker = (props: Partial<ColorPickerBaseProps<HsvColor>>) => (\n  <ColorPicker {...props} colorModel={colorModel} />\n)\n","import { ColorPicker } from \"./common/ColorPicker\"\nimport { ColorModel, ColorPickerBaseProps } from \"../types\"\nimport { equalColorString } from \"../utils/compare\"\nimport { hsvStringToHsva, hsvaToHsvString } from \"../utils/convert\"\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsv(0, 0%, 0%)\",\n  toHsva: hsvStringToHsva,\n  fromHsva: hsvaToHsvString,\n  equal: equalColorString,\n}\n\nexport const HsvStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>) => (\n  <ColorPicker {...props} colorModel={colorModel} />\n)\n","import { AlphaColorPicker } from \"./common/AlphaColorPicker\"\nimport { ColorModel, ColorPickerBaseProps, RgbaColor } from \"../types\"\nimport { equalColorObjects } from \"../utils/compare\"\nimport { rgbaToHsva, hsvaToRgba } from \"../utils/convert\"\n\nconst colorModel: ColorModel<RgbaColor> = {\n  defaultColor: { r: 0, g: 0, b: 0, a: 1 },\n  toHsva: rgbaToHsva,\n  fromHsva: hsvaToRgba,\n  equal: equalColorObjects,\n}\n\nexport const RgbaColorPicker = (props: Partial<ColorPickerBaseProps<RgbaColor>>) => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n)\n","import { AlphaColorPicker } from \"./common/AlphaColorPicker\"\nimport { ColorModel, ColorPickerBaseProps } from \"../types\"\nimport { equalColorString } from \"../utils/compare\"\nimport { rgbaStringToHsva, hsvaToRgbaString } from \"../utils/convert\"\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"rgba(0, 0, 0, 1)\",\n  toHsva: rgbaStringToHsva,\n  fromHsva: hsvaToRgbaString,\n  equal: equalColorString,\n}\n\nexport const RgbaStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>) => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n)\n","import { ColorPicker } from \"./common/ColorPicker\"\nimport { ColorModel, ColorPickerBaseProps, RgbColor } from \"../types\"\nimport { equalColorObjects } from \"../utils/compare\"\nimport { rgbaToHsva, hsvaToRgba, rgbaToRgb } from \"../utils/convert\"\n\nconst colorModel: ColorModel<RgbColor> = {\n  defaultColor: { r: 0, g: 0, b: 0 },\n  toHsva: ({ r, g, b }) => rgbaToHsva({ r, g, b, a: 1 }),\n  fromHsva: (hsva) => rgbaToRgb(hsvaToRgba(hsva)),\n  equal: equalColorObjects,\n}\n\nexport const RgbColorPicker = (props: Partial<ColorPickerBaseProps<RgbColor>>) => (\n  <ColorPicker {...props} colorModel={colorModel} />\n)\n","import { ColorPicker } from \"./common/ColorPicker\"\nimport { ColorModel, ColorPickerBaseProps } from \"../types\"\nimport { equalColorString } from \"../utils/compare\"\nimport { rgbStringToHsva, hsvaToRgbString } from \"../utils/convert\"\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"rgb(0, 0, 0)\",\n  toHsva: rgbStringToHsva,\n  fromHsva: hsvaToRgbString,\n  equal: equalColorString,\n}\n\nexport const RgbStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>) => (\n  <ColorPicker {...props} colorModel={colorModel} />\n)\n","const matcher = /^#?([0-9A-F]{3,8})$/i\n\nexport const validHex = (value: string, alpha?: boolean): boolean => {\n  const match = matcher.exec(value)\n  const length = match ? match[1].length : 0\n\n  return (\n    length === 3 || // '#rgb' format\n    length === 6 || // '#rrggbb' format\n    (!!alpha && length === 4) || // '#rgba' format\n    (!!alpha && length === 8) // '#rrggbbaa' format\n  )\n}\n","import { createEffect, createSignal, splitProps } from \"solid-js\"\n\nimport { useEventCallback } from \"../../hooks/useEventCallback\"\nimport { ColorInputBaseProps } from \"../../types\"\n\ntype EventWithTarget = Event & { target: { value: string } }\n\ninterface Props extends ColorInputBaseProps {\n  /** Blocks typing invalid characters and limits string length */\n  escape: (value: string) => string\n  /** Checks that value is valid color string */\n  validate: (value: string) => boolean\n  /** Processes value before displaying it in the input */\n  format?: (value: string) => string\n  /** Processes value before sending it in `onChange` */\n  process?: (value: string) => string\n}\n\nexport const ColorInput = (props: Props) => {\n  const [local, rest] = splitProps(props, [\n    \"color\",\n    \"escape\",\n    \"format\",\n    \"onBlur\",\n    \"onChange\",\n    \"process\",\n    \"validate\",\n  ])\n\n  const [value, setValue] = createSignal(local.escape(local.color || \"\"))\n  const onChangeCallback = useEventCallback<string>(local.onChange)\n  const onBlurCallback = useEventCallback(local.onBlur as any)\n\n  // Trigger `onChange` handler only if the input value is a valid color\n  const handleChange = (e: EventWithTarget) => {\n    const inputValue = local.escape(e.target.value)\n    setValue(inputValue)\n    if (local.validate(inputValue))\n      onChangeCallback(local.process ? local.process(inputValue) : inputValue)\n  }\n\n  // Take the color from props if the last typed color (in local state) is not valid\n  const handleBlur = (e: EventWithTarget) => {\n    if (!local.validate(e.target.value)) setValue(local.escape(local.color || \"\"))\n    onBlurCallback(e)\n  }\n\n  // Update the local state when `color` property value is changed\n  createEffect(() => {\n    setValue(local.escape(local.color || \"\"))\n  })\n\n  return (\n    <input\n      {...rest}\n      value={local.format ? local.format(value()) : value()}\n      // the element should not be checked for spelling errors\n      // @ts-expect-error: this doesn't exists\n      spellcheck=\"false\"\n      onChange={handleChange as any}\n      onBlur={handleBlur as any}\n    />\n  )\n}\n","import { splitProps } from \"solid-js\"\nimport { ColorInputBaseProps } from \"../types\"\n\nimport { validHex } from \"../utils/validate\"\nimport { ColorInput } from \"./common/ColorInput\"\n\ninterface HexColorInputProps extends ColorInputBaseProps {\n  /** Enables `#` prefix displaying */\n  prefixed?: boolean\n  /** Allows `#rgba` and `#rrggbbaa` color formats */\n  alpha?: boolean\n}\n\n/** Adds \"#\" symbol to the beginning of the string */\nconst prefix = (value: string) => \"#\" + value\n\nexport const HexColorInput = (props: HexColorInputProps) => {\n  const [local, rest] = splitProps(props, [\"alpha\", \"prefixed\"])\n\n  /** Escapes all non-hexadecimal characters including \"#\" */\n  const escape = (value: string) =>\n    value.replace(/([^0-9A-F]+)/gi, \"\").substring(0, local.alpha ? 8 : 6)\n\n  /** Validates hexadecimal strings */\n  const validate = (value: string) => validHex(value, local.alpha)\n\n  return (\n    <ColorInput\n      {...rest}\n      escape={escape}\n      format={local.prefixed ? prefix : undefined}\n      process={prefix}\n      validate={validate}\n    />\n  )\n}\n"],"names":["useEventCallback","handler","callbackRef","value","clamp","number","min","max","isTouch","event","Interactive","props","local","rest","splitProps","onKeyCallback","onMove","onKey","events","createMemo","handleMove","preventDefault","preventDefaultMove","toggleDocumentEvents","handleMoveEnd","state","parentWindow","self","toggleEvent","addEventListener","removeEventListener","handleMoveStart","handleKeyDown","keyCode","which","left","top","createEffect","h","_extends","onTouchStart","onMouseDown","class","ref","onKeyDown","tabIndex","role","formatClassName","names","filter","Boolean","join","Pointer","_props$top","nodeClass","style","color","round","digits","base","Math","pow","angleUnits","grad","turn","rad","PI","hexToRgba","hex","substr","length","r","parseInt","g","b","a","unit","Number","hslString","match","exec","parseHue","s","l","undefined","v","hslStringToHsva","hslaStringToHsva","hslaToHsva","hsvaToHsla","hh","hsva","hsvaToRgba","floor","c","d","module","hsvaStringToHsva","hsvString","roundHsva","hsvStringToHsva","rgbaStringToHsva","rgbaString","rgbaToHsva","rgbStringToHsva","format","toString","delta","Hue","interaction","onChange","offset","hue","hsvaToHslString","Saturation","equalColorObjects","first","second","prop","equalColorString","replace","useColorManipulation","colorModel","onChangeCallback","updateHsva","createSignal","toHsva","cache","equal","newHsva","newColor","fromHsva","params","current","Object","assign","getNonce","nonce","__webpack_nonce__","setNonce","hash","styleElementMap","Map","useStyleSheet","nodeRef","parentDocument","ownerDocument","document","has","styleElement","createElement","innerHTML","set","setAttribute","head","appendChild","ColorPicker","_local$color","setNodeRef","defaultColor","rgbaToHex","toLowerCase","Alpha","gradientStyle","backgroundImage","hsvaToHslaString","AlphaColorPicker","nodeClassName","HslaColorPicker","hslaToHsl","HslColorPicker","HsvaColorPicker","RgbaColorPicker","rgbaToRgb","RgbColorPicker","matcher","ColorInput","setValue","escape","onBlurCallback","onBlur","spellcheck","e","inputValue","target","validate","process","prefix","HexColorInput","substring","alpha","prefixed","validHex"],"mappings":"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"}